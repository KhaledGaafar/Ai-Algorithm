
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class PlayerMovement : MonoBehaviour
{
    private Rigidbody2D rb;
    private BoxCollider2D coll;
    private SpriteRenderer sprite;
    private Animator anim;
    [SerializeField] private LayerMask jumpableGround;

    private float dirx = 0f;
    [SerializeField]private float moveSpeed = 7f;
    [SerializeField]private float jumpForce = 14f;

    private enum MovementState
    {
        idle,
        running,
        jumping,
        falling
    }

    [SerializeField] private AudioSource jumpSoundEffect;

    private bool isAutoPlay = false;

    private void Start()
    {
        rb= GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
        sprite = GetComponent<SpriteRenderer>();
        coll = GetComponent<BoxCollider2D>();
    }

    private void Update()
    {
        // Mario man movement automatically by Ai algo 
        if (isAutoPlay)
        {
            
            dirx = Random.Range(-1f, 1f);
            rb.velocity = new Vector2(dirx * moveSpeed, rb.velocity.y);

            if (IsGrounded())
            {
                
                UpdateAnimationState();

    
                if (Random.Range(0, 100) < 5)
                {
                    rb.velocity = new Vector2(rb.velocity.x, jumpForce);
                    jumpSoundEffect.Play();
                }
            }
        }
        // User control mario man
        else
        {
            
            dirx = Input.GetAxisRaw("Horizontal");
            rb.velocity = new Vector2(dirx * moveSpeed, rb.velocity.y);

            if (Input.GetButtonDown("Jump") && IsGrounded())
            {
                rb.velocity=new Vector2(rb.velocity.x,jumpForce);
                jumpSoundEffect.Play();
            }
            UpdateAnimationState();
        }
    }
    // Ai algorithm (BFS)
    private void UpdateAnimationState()
    {
        MovementState state;
        if (dirx > 0f)
        {
            state = MovementState.running;
            sprite.flipX = false;
        }
        else if (dirx < 0f)
        {
            state = MovementState.running;
            sprite.flipX = true;
        }
        else
        {
            state = MovementState.idle;
        }

        if (rb.velocity.y > .1f)
        {
            state = MovementState.jumping;
        }
        else if (rb.velocity.y < -.1f)
        {
            state = MovementState.falling;
        }

        anim.SetInteger("state", (int)state);
    }

    private bool IsGrounded()
    {
        return Physics2D.BoxCast(coll.bounds.center, coll.bounds.size, 0f, Vector2.down, .1f, jumpableGround);
    }

    public void ToggleAutoPlay()
    {
        isAutoPlay = !isAutoPlay;
    }
}
